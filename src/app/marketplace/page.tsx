'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

interface Product {
  id: string;
  name: string;
  thaiName: string;
  icon: string;
  price: number;
  quantity: number;
  unit: string;
  seller: string;
  location: string;
  description: string;
  image?: string;
  isExpiring: boolean;
  discount?: number;
  rating: number;
  reviews: number;
  postedAt: string;
}

const mockProducts: Product[] = [
  {
    id: '1',
    name: 'rice',
    thaiName: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏≠‡∏°‡∏°‡∏∞‡∏•‡∏¥',
    icon: 'üåæ',
    price: 8500,
    quantity: 2,
    unit: '‡∏ï‡∏±‡∏ô',
    seller: '‡∏™‡∏ß‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
    location: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå',
    description: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏≠‡∏°‡∏°‡∏∞‡∏•‡∏¥‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ',
    rating: 4.8,
    reviews: 12,
    postedAt: '2024-01-15'
  },
  {
    id: '2',
    name: 'corn',
    thaiName: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î‡∏´‡∏ß‡∏≤‡∏ô',
    icon: 'üåΩ',
    price: 12000,
    quantity: 1.5,
    unit: '‡∏ï‡∏±‡∏ô',
    seller: '‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î‡∏•‡∏∏‡∏á‡πÅ‡∏î‡∏á',
    location: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤',
    description: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î‡∏´‡∏ß‡∏≤‡∏ô‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏ß‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏ö ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
    rating: 4.6,
    reviews: 8,
    postedAt: '2024-01-14'
  },
  {
    id: '3',
    name: 'cassava',
    thaiName: '‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á',
    icon: 'ü•î',
    price: 2800,
    quantity: 5,
    unit: '‡∏ï‡∏±‡∏ô',
    seller: '‡∏™‡∏ß‡∏ô‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏õ‡πâ‡∏≤‡∏™‡∏°‡∏®‡∏£‡∏µ',
    location: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ',
    description: '‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡πÅ‡∏õ‡πâ‡∏á',
    isExpiring: true,
    discount: 15,
    rating: 4.4,
    reviews: 5,
    postedAt: '2024-01-10'
  },
  {
    id: '4',
    name: 'vegetables',
    thaiName: '‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏Ç‡∏≤‡∏ß',
    icon: 'ü•¨',
    price: 25,
    quantity: 100,
    unit: '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°',
    seller: '‡∏™‡∏ß‡∏ô‡∏ú‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà',
    location: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ',
    description: '‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏Ç‡∏≤‡∏ß‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏õ‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏ô ‡∏õ‡∏•‡∏≠‡∏î‡∏™‡∏≤‡∏£‡∏û‡∏¥‡∏©',
    rating: 4.9,
    reviews: 25,
    postedAt: '2024-01-16'
  }
];

export default function Marketplace() {
  const [products, setProducts] = useState<Product[]>(mockProducts);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>(mockProducts);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [sortBy, setSortBy] = useState('newest');
  const [showExpiringOnly, setShowExpiringOnly] = useState(false);

  const categories = [
    { id: 'all', name: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', icon: 'üõí' },
    { id: 'rice', name: '‡∏Ç‡πâ‡∏≤‡∏ß', icon: 'üåæ' },
    { id: 'corn', name: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î', icon: 'üåΩ' },
    { id: 'cassava', name: '‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á', icon: 'ü•î' },
    { id: 'vegetables', name: '‡∏ú‡∏±‡∏Å', icon: 'ü•¨' },
    { id: 'fruits', name: '‡∏ú‡∏•‡πÑ‡∏°‡πâ', icon: 'üçé' }
  ];

  useEffect(() => {
    let filtered = products;

    // Filter by search term
    if (searchTerm) {
      filtered = filtered.filter(product =>
        product.thaiName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.seller.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.location.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Filter by category
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(product => product.name === selectedCategory);
    }

    // Filter by expiring products
    if (showExpiringOnly) {
      filtered = filtered.filter(product => product.isExpiring);
    }

    // Sort products
    switch (sortBy) {
      case 'price-low':
        filtered.sort((a, b) => a.price - b.price);
        break;
      case 'price-high':
        filtered.sort((a, b) => b.price - a.price);
        break;
      case 'rating':
        filtered.sort((a, b) => b.rating - a.rating);
        break;
      case 'newest':
        filtered.sort((a, b) => new Date(b.postedAt).getTime() - new Date(a.postedAt).getTime());
        break;
      default:
        break;
    }

    setFilteredProducts(filtered);
  }, [products, searchTerm, selectedCategory, sortBy, showExpiringOnly]);

  const getDiscountedPrice = (price: number, discount?: number) => {
    if (!discount) return price;
    return price * (1 - discount / 100);
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('th-TH');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <div className="text-3xl">üõí</div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">‡∏ï‡∏•‡∏≤‡∏î‡∏ä‡∏∏‡∏°‡∏ä‡∏ô</h1>
                <p className="text-gray-600">‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á</p>
              </div>
            </div>
            <div className="flex space-x-4">
              <Link
                href="/marketplace/sell"
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                üìù ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
              </Link>
              <Link
                href="/dashboard"
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
              </Link>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search and Filters */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* Search */}
            <div className="md:col-span-2">
              <input
                type="text"
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢, ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              />
            </div>

            {/* Category Filter */}
            <div>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              >
                {categories.map(category => (
                  <option key={category.id} value={category.id}>
                    {category.icon} {category.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Sort */}
            <div>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              >
                <option value="newest">‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
                <option value="price-low">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥-‡∏™‡∏π‡∏á</option>
                <option value="price-high">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥</option>
                <option value="rating">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</option>
              </select>
            </div>
          </div>

          {/* Additional Filters */}
          <div className="mt-4 flex items-center space-x-4">
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={showExpiringOnly}
                onChange={(e) => setShowExpiringOnly(e.target.checked)}
                className="rounded text-green-600 focus:ring-green-500"
              />
              <span className="text-sm text-gray-700">‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</span>
            </label>
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center">
              <div className="text-2xl mr-4">üì¶</div>
              <div>
                <p className="text-gray-600 text-sm">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                <p className="text-2xl font-bold text-gray-900">{filteredProducts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center">
              <div className="text-2xl mr-4">üë•</div>
              <div>
                <p className="text-gray-600 text-sm">‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢</p>
                <p className="text-2xl font-bold text-gray-900">
                  {new Set(filteredProducts.map(p => p.seller)).size} ‡∏Ñ‡∏ô
                </p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center">
              <div className="text-2xl mr-4">üí∞</div>
              <div>
                <p className="text-gray-600 text-sm">‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</p>
                <p className="text-2xl font-bold text-green-600">
                  {Math.round(filteredProducts.reduce((sum, p) => sum + p.price, 0) / filteredProducts.length).toLocaleString()} ‡∏ö‡∏≤‡∏ó
                </p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center">
              <div className="text-2xl mr-4">‚≠ê</div>
              <div>
                <p className="text-gray-600 text-sm">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</p>
                <p className="text-2xl font-bold text-yellow-600">
                  {filteredProducts.length > 0 ? (filteredProducts.reduce((sum, p) => sum + p.rating, 0) / filteredProducts.length).toFixed(1) : '0.0'}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Products Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {filteredProducts.map((product) => (
            <div key={product.id} className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow">
              {/* Product Image */}
              <div className="h-48 bg-gray-200 flex items-center justify-center">
                <div className="text-6xl">{product.icon}</div>
              </div>

              {/* Product Info */}
              <div className="p-4">
                <div className="flex justify-between items-start mb-2">
                  <h3 className="font-semibold text-gray-900">{product.thaiName}</h3>
                  {product.isExpiring && (
                    <span className="bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full">
                      ‚è∞ ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                    </span>
                  )}
                </div>

                <p className="text-sm text-gray-600 mb-2">{product.description}</p>

                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-1">
                    <span className="text-yellow-500">‚≠ê</span>
                    <span className="text-sm font-medium">{product.rating}</span>
                    <span className="text-sm text-gray-500">({product.reviews})</span>
                  </div>
                  <span className="text-sm text-gray-500">{formatDate(product.postedAt)}</span>
                </div>

                <div className="space-y-2 mb-4">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏£‡∏≤‡∏Ñ‡∏≤:</span>
                    <span className="font-semibold">
                      {product.discount ? (
                        <span>
                          <span className="line-through text-gray-400">{product.price.toLocaleString()}</span>
                          <span className="text-red-600 ml-2">
                            {getDiscountedPrice(product.price, product.discount).toLocaleString()} ‡∏ö‡∏≤‡∏ó
                          </span>
                        </span>
                      ) : (
                        <span>{product.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                      )}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</span>
                    <span className="font-semibold">{product.quantity} {product.unit}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢:</span>
                    <span className="font-semibold text-blue-600">{product.seller}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</span>
                    <span className="font-semibold">{product.location}</span>
                  </div>
                </div>

                {product.discount && (
                  <div className="bg-red-100 text-red-800 text-sm p-2 rounded-lg mb-3 text-center">
                    üéâ ‡∏•‡∏î {product.discount}% ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏!
                  </div>
                )}

                <div className="flex space-x-2">
                  <button className="flex-1 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm transition-colors">
                    üí¨ ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
                  </button>
                  <button className="flex-1 bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg text-sm transition-colors">
                    üõí ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Empty State */}
        {filteredProducts.length === 0 && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üõí</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
            <p className="text-gray-600 mb-4">‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</p>
            <button
              onClick={() => {
                setSearchTerm('');
                setSelectedCategory('all');
                setShowExpiringOnly(false);
              }}
              className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg transition-colors"
            >
              ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
            </button>
          </div>
        )}

        {/* Featured Section */}
        <div className="mt-12">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h2>
          <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="text-4xl mb-2">üåæ</div>
                <h3 className="font-semibold text-gray-900 mb-2">‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ</h3>
                <p className="text-sm text-gray-600">‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏≠‡∏°‡∏°‡∏∞‡∏•‡∏¥‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå ‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á</p>
              </div>
              <div className="text-center">
                <div className="text-4xl mb-2">ü•¨</div>
                <h3 className="font-semibold text-gray-900 mb-2">‡∏ú‡∏±‡∏Å‡∏õ‡∏•‡∏≠‡∏î‡∏™‡∏≤‡∏£</h3>
                <p className="text-sm text-gray-600">‡∏ú‡∏±‡∏Å‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏õ‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏ô ‡∏õ‡∏•‡∏≠‡∏î‡∏™‡∏≤‡∏£‡∏û‡∏¥‡∏©</p>
              </div>
              <div className="text-center">
                <div className="text-4xl mb-2">üçé</div>
                <h3 className="font-semibold text-gray-900 mb-2">‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•</h3>
                <p className="text-sm text-gray-600">‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
