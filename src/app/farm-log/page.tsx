'use client';

import { useState } from 'react';
import Link from 'next/link';

interface FarmRecord {
  id: string;
  cropName: string;
  date: string;
  area: number; // ‡πÑ‡∏£‡πà
  cost: number;
  income: number;
  profit: number;
  notes: string;
}

export default function FarmLog() {
  const [records, setRecords] = useState<FarmRecord[]>([
    {
      id: '1',
      cropName: '‡∏Ç‡πâ‡∏≤‡∏ß',
      date: '2024-01-15',
      area: 5,
      cost: 75000,
      income: 110000,
      profit: 35000,
      notes: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏≠‡∏°‡∏°‡∏∞‡∏•‡∏¥ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°'
    },
    {
      id: '2',
      cropName: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î',
      date: '2023-12-20',
      area: 3,
      cost: 36000,
      income: 54000,
      profit: 18000,
      notes: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î‡∏´‡∏ß‡∏≤‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    }
  ]);

  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    cropName: '',
    date: '',
    area: '',
    cost: '',
    income: '',
    notes: ''
  });

  const crops = [
    { id: '‡∏Ç‡πâ‡∏≤‡∏ß', name: '‡∏Ç‡πâ‡∏≤‡∏ß', icon: 'üåæ' },
    { id: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î', name: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î', icon: 'üåΩ' },
    { id: '‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á', name: '‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á', icon: 'ü•î' },
    { id: '‡∏≠‡πâ‡∏≠‡∏¢', name: '‡∏≠‡πâ‡∏≠‡∏¢', icon: 'üéã' },
    { id: '‡∏¢‡∏≤‡∏á‡∏û‡∏≤‡∏£‡∏≤', name: '‡∏¢‡∏≤‡∏á‡∏û‡∏≤‡∏£‡∏≤', icon: 'üå≥' },
    { id: '‡∏ú‡∏±‡∏Å', name: '‡∏ú‡∏±‡∏Å', icon: 'ü•¨' }
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newRecord: FarmRecord = {
      id: Date.now().toString(),
      cropName: formData.cropName,
      date: formData.date,
      area: parseFloat(formData.area),
      cost: parseFloat(formData.cost),
      income: parseFloat(formData.income),
      profit: parseFloat(formData.income) - parseFloat(formData.cost),
      notes: formData.notes
    };

    setRecords([newRecord, ...records]);
    setFormData({
      cropName: '',
      date: '',
      area: '',
      cost: '',
      income: '',
      notes: ''
    });
    setShowForm(false);
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const calculateStats = () => {
    const totalCost = records.reduce((sum, record) => sum + record.cost, 0);
    const totalIncome = records.reduce((sum, record) => sum + record.income, 0);
    const totalProfit = records.reduce((sum, record) => sum + record.profit, 0);
    const totalArea = records.reduce((sum, record) => sum + record.area, 0);
    const avgProfitPerRai = totalArea > 0 ? totalProfit / totalArea : 0;

    return {
      totalCost,
      totalIncome,
      totalProfit,
      totalArea,
      avgProfitPerRai
    };
  };

  const stats = calculateStats();

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <div className="text-3xl">üìù</div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å</h1>
                <p className="text-gray-600">‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£</p>
              </div>
            </div>
            <div className="flex space-x-4">
              <button
                onClick={() => setShowForm(!showForm)}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                {showForm ? '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' : '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}
              </button>
              <Link href="/dashboard" className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors">
                üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
              </Link>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center">
              <div className="text-2xl mr-4">üí∞</div>
              <div>
                <p className="text-gray-600 text-sm">‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°</p>
                <p className="text-2xl font-bold text-red-600">{stats.totalCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center">
              <div className="text-2xl mr-4">üìà</div>
              <div>
                <p className="text-gray-600 text-sm">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°</p>
                <p className="text-2xl font-bold text-green-600">{stats.totalIncome.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center">
              <div className="text-2xl mr-4">üíµ</div>
              <div>
                <p className="text-gray-600 text-sm">‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°</p>
                <p className="text-2xl font-bold text-blue-600">{stats.totalProfit.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center">
              <div className="text-2xl mr-4">üåæ</div>
              <div>
                <p className="text-gray-600 text-sm">‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalArea} ‡πÑ‡∏£‡πà</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center">
              <div className="text-2xl mr-4">üìä</div>
              <div>
                <p className="text-gray-600 text-sm">‡∏Å‡∏≥‡πÑ‡∏£/‡πÑ‡∏£‡πà</p>
                <p className="text-2xl font-bold text-purple-600">{stats.avgProfitPerRai.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
              </div>
            </div>
          </div>
        </div>

        {/* Add Record Form */}
        {showForm && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å</h2>
            <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">‡∏û‡∏∑‡∏ä</label>
                <select
                  value={formData.cropName}
                  onChange={(e) => handleInputChange('cropName', e.target.value)}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä</option>
                  {crops.map(crop => (
                    <option key={crop.id} value={crop.id}>{crop.icon} {crop.name}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß</label>
                <input
                  type="date"
                  value={formData.date}
                  onChange={(e) => handleInputChange('date', e.target.value)}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏£‡πà)</label>
                <input
                  type="number"
                  step="0.1"
                  value={formData.area}
                  onChange={(e) => handleInputChange('area', e.target.value)}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
                <input
                  type="number"
                  value={formData.cost}
                  onChange={(e) => handleInputChange('cost', e.target.value)}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó)</label>
                <input
                  type="number"
                  value={formData.income}
                  onChange={(e) => handleInputChange('income', e.target.value)}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                />
              </div>
              <div className="md:col-span-2 lg:col-span-1">
                <label className="block text-sm font-medium text-gray-700 mb-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                <input
                  type="text"
                  value={formData.notes}
                  onChange={(e) => handleInputChange('notes', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                />
              </div>
              <div className="md:col-span-2 lg:col-span-3 flex space-x-4">
                <button
                  type="submit"
                  className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg transition-colors"
                >
                  üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                </button>
                <button
                  type="button"
                  onClick={() => setShowForm(false)}
                  className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg transition-colors"
                >
                  ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
              </div>
            </form>
          </div>
        )}

        {/* Records List */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å</h2>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200">
                  <th className="text-left py-3 px-4 font-semibold text-gray-900">‡∏û‡∏∑‡∏ä</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-900">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-900">‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-900">‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-900">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-900">‡∏Å‡∏≥‡πÑ‡∏£</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-900">‡∏Å‡∏≥‡πÑ‡∏£/‡πÑ‡∏£‡πà</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-900">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                </tr>
              </thead>
              <tbody>
                {records.map((record) => (
                  <tr key={record.id} className="border-b border-gray-100 hover:bg-gray-50">
                    <td className="py-3 px-4">
                      <div className="flex items-center space-x-2">
                        <span className="text-xl">
                          {crops.find(c => c.id === record.cropName)?.icon || 'üåæ'}
                        </span>
                        <span className="font-medium">{record.cropName}</span>
                      </div>
                    </td>
                    <td className="py-3 px-4 text-gray-600">
                      {new Date(record.date).toLocaleDateString('th-TH')}
                    </td>
                    <td className="py-3 px-4 text-gray-600">{record.area} ‡πÑ‡∏£‡πà</td>
                    <td className="py-3 px-4 text-red-600 font-medium">
                      {(record.cost || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó
                    </td>
                    <td className="py-3 px-4 text-green-600 font-medium">
                      {(record.income || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó
                    </td>
                    <td className="py-3 px-4">
                      <span className={`font-medium ${(record.profit || 0) >= 0 ? 'text-blue-600' : 'text-red-600'}`}>
                        {(record.profit || 0) >= 0 ? '+' : ''}{(record.profit || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó
                      </span>
                    </td>
                    <td className="py-3 px-4">
                      <span className={`font-medium ${(record.profit || 0) >= 0 ? 'text-purple-600' : 'text-red-600'}`}>
                        {(record.profit || 0) >= 0 ? '+' : ''}{((record.profit || 0) / (record.area || 1)).toLocaleString()} ‡∏ö‡∏≤‡∏ó
                      </span>
                    </td>
                    <td className="py-3 px-4 text-gray-600 text-sm">{record.notes}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Charts Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8">
          {/* Profit by Crop */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡∏ä</h3>
            <div className="space-y-4">
              {crops.map(crop => {
                const cropRecords = records.filter(r => r.cropName === crop.id);
                const totalProfit = cropRecords.reduce((sum, r) => sum + (r.profit || 0), 0);
                const totalArea = cropRecords.reduce((sum, r) => sum + (r.area || 0), 0);
                
                if (cropRecords.length === 0) return null;
                
                return (
                  <div key={crop.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <span className="text-2xl">{crop.icon}</span>
                      <div>
                        <div className="font-medium">{crop.name}</div>
                        <div className="text-sm text-gray-600">{totalArea} ‡πÑ‡∏£‡πà</div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className={`font-semibold ${totalProfit >= 0 ? 'text-blue-600' : 'text-red-600'}`}>
                        {totalProfit >= 0 ? '+' : ''}{totalProfit.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                      </div>
                      <div className="text-sm text-gray-600">
                        {(totalProfit / (totalArea || 1)).toLocaleString()} ‡∏ö‡∏≤‡∏ó/‡πÑ‡∏£‡πà
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Monthly Summary */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
            <div className="space-y-4">
              {Array.from(new Set(records.map(r => new Date(r.date).getFullYear() + '-' + (new Date(r.date).getMonth() + 1)))).map(month => {
                const monthRecords = records.filter(r => {
                  const recordMonth = new Date(r.date).getFullYear() + '-' + (new Date(r.date).getMonth() + 1);
                  return recordMonth === month;
                });
                const monthProfit = monthRecords.reduce((sum, r) => sum + (r.profit || 0), 0);
                const monthIncome = monthRecords.reduce((sum, r) => sum + (r.income || 0), 0);
                
                return (
                  <div key={month} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div>
                      <div className="font-medium">
                        {new Date(month + '-01').toLocaleDateString('th-TH', { year: 'numeric', month: 'long' })}
                      </div>
                      <div className="text-sm text-gray-600">{monthRecords.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
                    </div>
                    <div className="text-right">
                      <div className={`font-semibold ${monthProfit >= 0 ? 'text-blue-600' : 'text-red-600'}`}>
                        {monthProfit >= 0 ? '+' : ''}{monthProfit.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                      </div>
                      <div className="text-sm text-gray-600">
                        ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ: {monthIncome.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="mt-8 bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Link
              href="/recommendations"
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-3 rounded-lg text-center transition-colors"
            >
              üå± ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å
            </Link>
            <Link
              href="/market-analysis"
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-lg text-center transition-colors"
            >
              üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î
            </Link>
            <Link
              href="/marketplace"
              className="bg-orange-600 hover:bg-orange-700 text-white px-4 py-3 rounded-lg text-center transition-colors"
            >
              üõí ‡∏ï‡∏•‡∏≤‡∏î‡∏ä‡∏∏‡∏°‡∏ä‡∏ô
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}
