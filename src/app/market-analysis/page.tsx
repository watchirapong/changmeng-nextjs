'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

interface MarketData {
  cropName: string;
  currentPrice: number;
  priceHistory: { date: string; price: number }[];
  prediction: {
    nextMonth: number;
    nextThreeMonths: number;
    confidence: number;
    factors: string[];
  };
  marketTrend: 'rising' | 'falling' | 'stable';
  recommendation: string;
}

export default function MarketAnalysis() {
  const [selectedCrop, setSelectedCrop] = useState('‡∏Ç‡πâ‡∏≤‡∏ß');
  const [marketData, setMarketData] = useState<MarketData | null>(null);
  const [loading, setLoading] = useState(false);
  const [compareMode, setCompareMode] = useState(false);
  const [compareCrops, setCompareCrops] = useState<string[]>(['‡∏Ç‡πâ‡∏≤‡∏ß', '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î']);

  const crops = [
    { id: '‡∏Ç‡πâ‡∏≤‡∏ß', name: '‡∏Ç‡πâ‡∏≤‡∏ß', icon: 'üåæ' },
    { id: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î', name: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î', icon: 'üåΩ' },
    { id: '‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á', name: '‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á', icon: 'ü•î' },
    { id: '‡∏≠‡πâ‡∏≠‡∏¢', name: '‡∏≠‡πâ‡∏≠‡∏¢', icon: 'üéã' },
    { id: '‡∏¢‡∏≤‡∏á‡∏û‡∏≤‡∏£‡∏≤', name: '‡∏¢‡∏≤‡∏á‡∏û‡∏≤‡∏£‡∏≤', icon: 'üå≥' }
  ];

  const fetchMarketData = async (cropName: string) => {
    setLoading(true);
    try {
      const response = await fetch(`/api/ai/market-analysis?crop=${cropName}`);
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setMarketData(data.analysis);
        }
      } else {
        console.error('Error response:', response.status);
      }
    } catch (error) {
      console.error('Error fetching market data:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchMarketData(selectedCrop);
  }, [selectedCrop]);

  const getTrendColor = (trend: string) => {
    if (trend === 'rising') return 'text-green-600';
    if (trend === 'falling') return 'text-red-600';
    return 'text-gray-600';
  };

  const getTrendIcon = (trend: string) => {
    if (trend === 'rising') return 'üìà';
    if (trend === 'falling') return 'üìâ';
    return '‚û°Ô∏è';
  };

  const calculatePriceChange = (current: number, previous: number) => {
    return ((current - previous) / previous * 100).toFixed(1);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <div className="text-3xl">üìä</div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î</h1>
                <p className="text-gray-600">‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î</p>
              </div>
            </div>
            <Link href="/dashboard" className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors">
              üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
            </Link>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Controls */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center space-y-4 md:space-y-0">
            <div className="flex items-center space-x-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä</label>
                <select
                  value={selectedCrop}
                  onChange={(e) => setSelectedCrop(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  {crops.map(crop => (
                    <option key={crop.id} value={crop.id}>{crop.icon} {crop.name}</option>
                  ))}
                </select>
              </div>
              <button
                onClick={() => setCompareMode(!compareMode)}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  compareMode 
                    ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                    : 'bg-gray-200 hover:bg-gray-300 text-gray-700'
                }`}
              >
                {compareMode ? 'üîç ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö' : 'üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏û‡∏∑‡∏ä'}
              </button>
            </div>
            <div className="text-sm text-gray-600">
              ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {new Date().toLocaleString('th-TH')}
            </div>
          </div>

          {compareMode && (
            <div className="mt-4 p-4 bg-blue-50 rounded-lg">
              <h3 className="font-semibold text-blue-800 mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö</h3>
              <div className="flex flex-wrap gap-2">
                {crops.map(crop => (
                  <button
                    key={crop.id}
                    onClick={() => {
                      if (compareCrops.includes(crop.id)) {
                        setCompareCrops(compareCrops.filter(c => c !== crop.id));
                      } else if (compareCrops.length < 3) {
                        setCompareCrops([...compareCrops, crop.id]);
                      }
                    }}
                    className={`px-3 py-1 rounded-full text-sm transition-colors ${
                      compareCrops.includes(crop.id)
                        ? 'bg-blue-600 text-white'
                        : 'bg-white text-gray-700 border border-gray-300'
                    }`}
                  >
                    {crop.icon} {crop.name}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>

        {loading ? (
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-green-600 mx-auto"></div>
            <p className="mt-4 text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î...</p>
          </div>
        ) : (
          <div className="space-y-8">
            {/* Current Market Overview */}
            {marketData && (
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h3>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-gray-900 mb-2">
                      {(marketData.currentPrice || 0).toLocaleString()}
                    </div>
                    <div className="text-sm text-gray-600">‡∏ö‡∏≤‡∏ó/‡∏ï‡∏±‡∏ô</div>
                  </div>
                </div>

                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏•‡∏≤‡∏î</h3>
                  <div className="text-center">
                    <div className={`text-3xl mb-2 ${getTrendColor(marketData.marketTrend)}`}>
                      {getTrendIcon(marketData.marketTrend)}
                    </div>
                    <div className={`font-semibold ${getTrendColor(marketData.marketTrend)}`}>
                      {marketData.marketTrend === 'rising' ? '‡∏Ç‡∏∂‡πâ‡∏ô' : marketData.marketTrend === 'falling' ? '‡∏•‡∏á' : '‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£'}
                    </div>
                  </div>
                </div>

                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô</h3>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-blue-600 mb-2">
                      {marketData.prediction?.confidence || 0}%
                    </div>
                    <div className="text-sm text-gray-600">‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå</div>
                  </div>
                </div>
              </div>
            )}

            {/* Price History Chart */}
            {marketData && (
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</h3>
                <div className="space-y-4">
                  {(marketData.priceHistory || []).map((item, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <span className="font-medium">{item.date}</span>
                      <span className="font-semibold text-gray-900">{(item.price || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏±‡∏ô</span>
                      {index > 0 && (
                        <span className={`text-sm ${
                          (item.price || 0) > (marketData.priceHistory[index - 1].price || 0)
                            ? 'text-green-600' 
                            : 'text-red-600'
                        }`}>
                          {(item.price || 0) > (marketData.priceHistory[index - 1].price || 0) ? '+' : ''}
                          {calculatePriceChange(item.price || 0, marketData.priceHistory[index - 1].price || 0)}%
                        </span>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Price Predictions */}
            {marketData && (
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="p-4 bg-green-50 rounded-lg">
                    <h4 className="font-semibold text-green-800 mb-2">üìÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤</h4>
                    <div className="text-2xl font-bold text-green-600 mb-2">
                      {(marketData.prediction?.nextMonth || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏±‡∏ô
                    </div>
                    <div className="text-sm text-green-700">
                      {(marketData.prediction?.nextMonth || 0) > (marketData.currentPrice || 0) ? '+' : ''}
                      {calculatePriceChange(marketData.prediction?.nextMonth || 0, marketData.currentPrice || 0)}% 
                      ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    </div>
                  </div>
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <h4 className="font-semibold text-blue-800 mb-2">üìÖ 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤</h4>
                    <div className="text-2xl font-bold text-blue-600 mb-2">
                      {(marketData.prediction?.nextThreeMonths || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏±‡∏ô
                    </div>
                    <div className="text-sm text-blue-700">
                      {(marketData.prediction?.nextThreeMonths || 0) > (marketData.currentPrice || 0) ? '+' : ''}
                      {calculatePriceChange(marketData.prediction?.nextThreeMonths || 0, marketData.currentPrice || 0)}% 
                      ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Market Factors */}
            {marketData && (
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {(marketData.prediction?.factors || []).map((factor, index) => (
                    <div key={index} className="p-3 bg-yellow-50 rounded-lg">
                      <div className="flex items-center space-x-2">
                        <span className="text-yellow-600">üí°</span>
                        <span className="text-sm text-yellow-800">{factor}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* AI Recommendation */}
            {marketData && (
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI</h3>
                <div className="p-4 bg-blue-50 rounded-lg">
                  <p className="text-blue-800">{marketData.recommendation || '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î'}</p>
                </div>
              </div>
            )}

            {/* Economic Impact Analysis */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="p-4 bg-purple-50 rounded-lg">
                  <h4 className="font-semibold text-purple-800 mb-2">üåç ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÇ‡∏•‡∏Å</h4>
                  <ul className="text-sm text-purple-700 space-y-1">
                    <li>‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á</li>
                    <li>‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô</li>
                    <li>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®</li>
                  </ul>
                </div>
                <div className="p-4 bg-green-50 rounded-lg">
                  <h4 className="font-semibold text-green-800 mb-2">üå¶Ô∏è ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥</h4>
                  <ul className="text-sm text-green-700 space-y-1">
                    <li>‚Ä¢ ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®</li>
                    <li>‚Ä¢ ‡∏†‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥</li>
                    <li>‚Ä¢ ‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•</li>
                  </ul>
                </div>
                <div className="p-4 bg-orange-50 rounded-lg">
                  <h4 className="font-semibold text-orange-800 mb-2">üìà ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡∏•‡∏≤‡∏î</h4>
                  <ul className="text-sm text-orange-700 space-y-1">
                    <li>‚Ä¢ ‡∏≠‡∏∏‡∏õ‡∏™‡∏á‡∏Ñ‡πå-‡∏≠‡∏∏‡∏õ‡∏ó‡∏≤‡∏ô</li>
                    <li>‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</li>
                    <li>‚Ä¢ ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏±‡∏ê</li>
                  </ul>
                </div>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <Link
                  href="/recommendations"
                  className="bg-green-600 hover:bg-green-700 text-white px-4 py-3 rounded-lg text-center transition-colors"
                >
                  üå± ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å
                </Link>
                <Link
                  href="/marketplace"
                  className="bg-orange-600 hover:bg-orange-700 text-white px-4 py-3 rounded-lg text-center transition-colors"
                >
                  üõí ‡πÑ‡∏õ‡∏ï‡∏•‡∏≤‡∏î‡∏ä‡∏∏‡∏°‡∏ä‡∏ô
                </Link>
                <Link
                  href="/farm-log"
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-lg text-center transition-colors"
                >
                  üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å
                </Link>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
